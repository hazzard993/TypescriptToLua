// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transformation (callNamespace) 1`] = `"Namespace:myFunction()"`;

exports[`Transformation (characterEscapeSequence) 1`] = `
"local quoteInDoubleQuotes = \\"\\\\' \\\\' \\\\'\\"
local quoteInTemplateString = \\"\\\\' \\\\' \\\\'\\"
local doubleQuoteInQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local doubleQuoteInDoubleQuotes = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local doubleQuoteInTemplateString = \\"\\\\\\" \\\\\\" \\\\\\"\\"
local backQuoteInQuotes = \\"\` \` \`\\"
local backQuoteInDoubleQuotes = \\"\` \` \`\\"
local backQuoteInTemplateString = \\"\` \` \`\\"
local escapedCharsInQuotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\"
local escapedCharsInDoubleQUotes = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\'\\"
local escapedCharsInTemplateString = \\"\\\\\\\\ \\\\0 \\\\b \\\\t \\\\n \\\\v \\\\f \\\\\\" \\\\' \`\\"
local nonEmptyTemplateString = \\"Level 0: \\\\n\\\\t \\" .. \\"Level 1: \\\\n\\\\t\\\\t \\" .. \\"Level 3: \\\\n\\\\t\\\\t\\\\t \\" .. \\"Last level \\\\n --\\" .. \\" \\\\n --\\" .. \\" \\\\n --\\" .. \\" \\\\n --\\""
`;

exports[`Transformation (classExtension1) 1`] = `
"function MyClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension2) 1`] = `
"function TestClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension3) 1`] = `
"function RenamedTestClass.myFunction(self)
end
function RenamedMyClass.myFunction(self)
end"
`;

exports[`Transformation (classExtension4) 1`] = `
"MyClass.test = \\"test\\"
MyClass.testP = \\"testP\\"
function MyClass.myFunction(self)
end"
`;

exports[`Transformation (classPureAbstract) 1`] = `
"ClassB = {}
ClassB.name = \\"ClassB\\"
ClassB.__index = ClassB
ClassB.prototype = {}
ClassB.prototype.__index = ClassB.prototype
ClassB.prototype.constructor = ClassB
function ClassB.new(...)
    local self = setmetatable({}, ClassB.prototype)
    self:____constructor(...)
    return self
end
function ClassB.prototype.____constructor(self)
end"
`;

exports[`Transformation (continue) 1`] = `
"do
    local i = 0
    while i < 10 do
        do
            if i < 5 then
                goto __continue1
            end
        end
        ::__continue1::
        i = i + 1
    end
end"
`;

exports[`Transformation (continueConcurrent) 1`] = `
"do
    local i = 0
    while i < 10 do
        do
            if i < 5 then
                goto __continue1
            end
            if i == 7 then
                goto __continue1
            end
        end
        ::__continue1::
        i = i + 1
    end
end"
`;

exports[`Transformation (continueNested) 1`] = `
"do
    local i = 0
    while i < 5 do
        do
            if i % 2 == 0 then
                goto __continue1
            end
            do
                local j = 0
                while j < 2 do
                    do
                        if j == 1 then
                            goto __continue3
                        end
                    end
                    ::__continue3::
                    j = j + 1
                end
            end
        end
        ::__continue1::
        i = i + 1
    end
end"
`;

exports[`Transformation (continueNestedConcurrent) 1`] = `
"do
    local i = 0
    while i < 5 do
        do
            if i % 2 == 0 then
                goto __continue1
            end
            do
                local j = 0
                while j < 2 do
                    do
                        if j == 1 then
                            goto __continue3
                        end
                    end
                    ::__continue3::
                    j = j + 1
                end
            end
            if i == 4 then
                goto __continue1
            end
        end
        ::__continue1::
        i = i + 1
    end
end"
`;

exports[`Transformation (do) 1`] = `
"local e = 10
repeat
    e = e - 1
until not (e > 0)"
`;

exports[`Transformation (enum) 1`] = `
"TestEnum = {}
TestEnum.val1 = 0
TestEnum[0] = \\"val1\\"
TestEnum.val2 = 2
TestEnum[2] = \\"val2\\"
TestEnum.val3 = 3
TestEnum[3] = \\"val3\\""
`;

exports[`Transformation (enumHeterogeneous) 1`] = `
"TestEnum = {}
TestEnum.val1 = 0
TestEnum[0] = \\"val1\\"
TestEnum.val2 = 3
TestEnum[3] = \\"val2\\"
TestEnum.val3 = \\"baz\\"
TestEnum.baz = \\"val3\\""
`;

exports[`Transformation (enumMembersOnly) 1`] = `
"val1 = 0
val2 = 2
val3 = 3
val4 = \\"bye\\"
local a = val1"
`;

exports[`Transformation (enumString) 1`] = `
"TestEnum = {}
TestEnum.val1 = \\"foo\\"
TestEnum.foo = \\"val1\\"
TestEnum.val2 = \\"bar\\"
TestEnum.bar = \\"val2\\"
TestEnum.val3 = \\"baz\\"
TestEnum.baz = \\"val3\\""
`;

exports[`Transformation (exportStatement) 1`] = `
"local ____exports = {}
local xyz = 4
____exports.xyz = xyz
____exports.uwv = xyz
do
    local __TSTL_export = require(\\"xyz\\")
    for ____exportKey, ____exportValue in pairs(__TSTL_export) do
        ____exports[____exportKey] = ____exportValue
    end
end
do
    local __TSTL_xyz = require(\\"xyz\\")
    local abc = __TSTL_xyz.abc
    local def = __TSTL_xyz.def
    ____exports.abc = abc
    ____exports.def = def
end
do
    local __TSTL_xyz = require(\\"xyz\\")
    local def = __TSTL_xyz.abc
    ____exports.def = def
end
return ____exports"
`;

exports[`Transformation (for) 1`] = `
"do
    local i = 1
    while i <= 100 do
        i = i + 1
    end
end"
`;

exports[`Transformation (forIn) 1`] = `
"for i in pairs({
    a = 1,
    b = 2,
    c = 3,
    d = 4,
}) do
end"
`;

exports[`Transformation (forOf) 1`] = `
"local ____TS_array = {
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
}
for ____TS_index = 1, #____TS_array do
    local i = ____TS_array[____TS_index]
end"
`;

exports[`Transformation (functionRestArguments) 1`] = `
"function varargsFunction(self, a, ...)
    local b = ({...})
end"
`;

exports[`Transformation (getSetAccessors) 1`] = `
"require(\\"lualib_bundle\\");
MyClass = {}
MyClass.name = \\"MyClass\\"
MyClass.__index = MyClass
MyClass.prototype = {}
MyClass.prototype.____getters = {}
MyClass.prototype.__index = __TS__Index(MyClass.prototype)
MyClass.prototype.____setters = {}
MyClass.prototype.__newindex = __TS__NewIndex(MyClass.prototype)
MyClass.prototype.constructor = MyClass
function MyClass.new(...)
    local self = setmetatable({}, MyClass.prototype)
    self:____constructor(...)
    return self
end
function MyClass.prototype.____constructor(self)
end
function MyClass.prototype.____getters.field(self)
    return self._field + 4
end
function MyClass.prototype.____setters.field(self, v)
    self._field = v * 2
end
local instance = MyClass.new()
instance.field = 4
local b = instance.field
local c = (4 + instance.field) * 3"
`;

exports[`Transformation (interfaceIndex) 1`] = `
"local a = {}
a.abc = \\"def\\""
`;

exports[`Transformation (luaTable) 1`] = `
"tbl = {}
tbl.value = 5
local value = tbl.value
local tblLength = #tbl
itbl.value = 5
local ivalue = itbl.value
local ilength = #tbl"
`;

exports[`Transformation (methodRestArguments) 1`] = `
"MyClass = {}
MyClass.name = \\"MyClass\\"
MyClass.__index = MyClass
MyClass.prototype = {}
MyClass.prototype.__index = MyClass.prototype
MyClass.prototype.constructor = MyClass
function MyClass.new(...)
    local self = setmetatable({}, MyClass.prototype)
    self:____constructor(...)
    return self
end
function MyClass.prototype.____constructor(self)
end
function MyClass.prototype.varargsFunction(self, a, ...)
    local b = ({...})
end"
`;

exports[`Transformation (modulesChangedVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = 1
return ____exports"
`;

exports[`Transformation (modulesClassExport) 1`] = `
"local ____exports = {}
____exports.TestClass = {}
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
TestClass.__index = TestClass
TestClass.prototype = {}
TestClass.prototype.__index = TestClass.prototype
TestClass.prototype.constructor = TestClass
function TestClass.new(...)
    local self = setmetatable({}, TestClass.prototype)
    self:____constructor(...)
    return self
end
function TestClass.prototype.____constructor(self)
end
return ____exports"
`;

exports[`Transformation (modulesClassWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestClass = {}
local TestClass = ____exports.TestClass
TestClass.name = \\"TestClass\\"
TestClass.__index = TestClass
TestClass.prototype = {}
TestClass.prototype.__index = TestClass.prototype
TestClass.prototype.constructor = TestClass
function TestClass.new(...)
    local self = setmetatable({}, TestClass.prototype)
    self:____constructor(...)
    return self
end
function TestClass.prototype.____constructor(self)
end
function TestClass.prototype.memberFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionExport) 1`] = `
"local ____exports = {}
function ____exports.publicFunc(self)
end
return ____exports"
`;

exports[`Transformation (modulesFunctionNoExport) 1`] = `
"function publicFunc(self)
end"
`;

exports[`Transformation (modulesImportAll) 1`] = `
"local Test = require(\\"test\\")
local ____ = Test"
`;

exports[`Transformation (modulesImportNamed) 1`] = `
"local __TSTL_test = require(\\"test\\")
local TestClass = __TSTL_test.TestClass
local ____ = TestClass"
`;

exports[`Transformation (modulesImportNamedSpecialChars) 1`] = `
"local __TSTL_kebab_2Dmodule = require(\\"kebab-module\\")
local TestClass1 = __TSTL_kebab_2Dmodule.TestClass1
local __TSTL_dollar_24module = require(\\"dollar$module\\")
local TestClass2 = __TSTL_dollar_24module.TestClass2
local __TSTL_singlequote_27module = require(\\"singlequote'module\\")
local TestClass3 = __TSTL_singlequote_27module.TestClass3
local __TSTL_hash_23module = require(\\"hash#module\\")
local TestClass4 = __TSTL_hash_23module.TestClass4
local __TSTL_space_20module = require(\\"space module\\")
local TestClass5 = __TSTL_space_20module.TestClass5
local ____ = TestClass1
local ____ = TestClass2
local ____ = TestClass3
local ____ = TestClass4
local ____ = TestClass5"
`;

exports[`Transformation (modulesImportRenamed) 1`] = `
"local __TSTL_test = require(\\"test\\")
local RenamedClass = __TSTL_test.TestClass
local ____ = RenamedClass"
`;

exports[`Transformation (modulesImportRenamedSpecialChars) 1`] = `
"local __TSTL_kebab_2Dmodule = require(\\"kebab-module\\")
local RenamedClass1 = __TSTL_kebab_2Dmodule.TestClass
local __TSTL_dollar_24module = require(\\"dollar$module\\")
local RenamedClass2 = __TSTL_dollar_24module.TestClass
local __TSTL_singlequote_27module = require(\\"singlequote'module\\")
local RenamedClass3 = __TSTL_singlequote_27module.TestClass
local __TSTL_hash_23module = require(\\"hash#module\\")
local RenamedClass4 = __TSTL_hash_23module.TestClass
local __TSTL_space_20module = require(\\"space module\\")
local RenamedClass5 = __TSTL_space_20module.TestClass
local ____ = RenamedClass1
local ____ = RenamedClass2
local ____ = RenamedClass3
local ____ = RenamedClass4
local ____ = RenamedClass5"
`;

exports[`Transformation (modulesImportWithoutFromClause) 1`] = `"require(\\"test\\")"`;

exports[`Transformation (modulesNamespaceExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
return ____exports"
`;

exports[`Transformation (modulesNamespaceExportEnum) 1`] = `
"local ____exports = {}
____exports.test = {}
local test = ____exports.test
do
    test.TestEnum = {}
    test.TestEnum.foo = \\"foo\\"
    test.TestEnum.foo = \\"foo\\"
    test.TestEnum.bar = \\"bar\\"
    test.TestEnum.bar = \\"bar\\"
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceNestedWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    TestSpace.TestNestedSpace = {}
    local TestNestedSpace = TestSpace.TestNestedSpace
    do
        function TestNestedSpace.innerFunc(self)
        end
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceNoExport) 1`] = `"TestSpace = {}"`;

exports[`Transformation (modulesNamespaceWithMemberExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
local TestSpace = ____exports.TestSpace
do
    function TestSpace.innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesNamespaceWithMemberNoExport) 1`] = `
"local ____exports = {}
____exports.TestSpace = {}
do
    local function innerFunc(self)
    end
end
return ____exports"
`;

exports[`Transformation (modulesVariableExport) 1`] = `
"local ____exports = {}
____exports.foo = \\"bar\\"
return ____exports"
`;

exports[`Transformation (modulesVariableNoExport) 1`] = `"local foo = \\"bar\\""`;

exports[`Transformation (namespace) 1`] = `
"myNamespace = {}
do
    local function nsMember(self)
    end
end"
`;

exports[`Transformation (namespaceMerge) 1`] = `
"MergedClass = {}
MergedClass.name = \\"MergedClass\\"
MergedClass.__index = MergedClass
MergedClass.prototype = {}
MergedClass.prototype.__index = MergedClass.prototype
MergedClass.prototype.constructor = MergedClass
function MergedClass.new(...)
    local self = setmetatable({}, MergedClass.prototype)
    self:____constructor(...)
    return self
end
function MergedClass.prototype.____constructor(self)
    self.propertyFunc = function()
    end
end
function MergedClass.staticMethodA(self)
end
function MergedClass.staticMethodB(self)
    self:staticMethodA()
end
function MergedClass.prototype.methodA(self)
end
function MergedClass.prototype.methodB(self)
    self:methodA()
    self:propertyFunc()
end
do
    function MergedClass.namespaceFunc(self)
    end
end
local mergedClass = MergedClass.new()
mergedClass:methodB()
mergedClass:propertyFunc()
MergedClass:staticMethodB()
MergedClass:namespaceFunc()"
`;

exports[`Transformation (namespaceNested) 1`] = `
"myNamespace = {}
do
    local myNestedNamespace = {}
    do
        local function nsMember(self)
        end
    end
end"
`;

exports[`Transformation (namespacePhantom) 1`] = `
"function nsMember(self)
end"
`;

exports[`Transformation (returnDefault) 1`] = `
"function myFunc(self)
    return
end"
`;

exports[`Transformation (shorthandPropertyAssignment) 1`] = `
"local f
f = function(____, x) return ({x = x}) end"
`;

exports[`Transformation (tryCatch) 1`] = `
"do
    local ____TS_try, er = pcall(function()
        local a = 42
    end)
    if not (____TS_try) then
        local b = \\"fail\\"
    end
end"
`;

exports[`Transformation (tryCatchFinally) 1`] = `
"do
    local ____TS_try, er = pcall(function()
        local a = 42
    end)
    if not (____TS_try) then
        local b = \\"fail\\"
    end
    do
        local c = \\"finally\\"
    end
end"
`;

exports[`Transformation (tryFinally) 1`] = `
"do
    pcall(function()
        local a = 42
    end)
    do
        local b = \\"finally\\"
    end
end"
`;

exports[`Transformation (tupleReturn) 1`] = `
"function tupleReturn(self)
    return 0, \\"foobar\\"
end
tupleReturn(_G)
noTupleReturn(_G)
local a, b = tupleReturn(_G)
local c, d = table.unpack(noTupleReturn(_G))
a, b = tupleReturn(_G)
c, d = table.unpack(noTupleReturn(_G))
local e = ({tupleReturn(_G)})
local f = noTupleReturn(_G)
e = ({tupleReturn(_G)})
f = noTupleReturn(_G)
foo(_G, ({tupleReturn(_G)}))
foo(_G, noTupleReturn(_G))
function tupleReturnFromVar(self)
    local r = {
        1,
        \\"baz\\",
    }
    return table.unpack(r)
end
function tupleReturnForward(self)
    return tupleReturn(_G)
end
function tupleNoForward(self)
    return ({tupleReturn(_G)})
end
function tupleReturnUnpack(self)
    return table.unpack(tupleNoForward(_G))
end"
`;

exports[`Transformation (typeAssert) 1`] = `
"local test1 = 10
local test2 = 10"
`;

exports[`Transformation (while) 1`] = `
"local d = 10
while d > 0 do
    d = d - 1
end"
`;
